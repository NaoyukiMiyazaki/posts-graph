{"version":3,"sources":["lib/Header.tsx","lib/GraphBlock.tsx","lib/utils/getWeeksInMonth.ts","lib/Graph.tsx","lib/FocusPosts.tsx","lib/utils/getDate.ts","lib/PostsGraph.tsx","serviceWorker.ts","index.tsx"],"names":["Header","_ref","year","minYear","maxYear","prevClick","nextClick","react_default","a","createElement","className","concat","onClick","NotExistGraphBlock","onFocus","GraphBlock","_ref2","month","week","count","GraphBlock_NotExistGraphBlock","title","tabIndex","getWeeksInMonth","targetMonth","moment","nextMonth","clone","add","weeksInYear","weeks","updateLocale","dow","doy","months","getCount","post","key","length","Graph","props","vertical","posts","map","m","w","_","Fragment","keys","createKeys","lib_GraphBlock","Object","assign","_onFocus","apply","this","arguments","toString","_onFocus2","_onFocus3","_onFocus4","_onFocus5","FocusPosts","_ref$posts","guid","href","link","target","pubDate","getDate","dateValue","lastDayOfWeek","endOf","firstDayOfMonth","startOf","diff","today","Date","dateStringOptions","weekday","day","PostsGraph","state","getFullYear","focus","_this2","asyncToGenerator","regenerator_default","mark","_callee","parser","feed","years","_posts","wrap","_context","prev","next","Parser","parseURL","rss","sent","items","reduceRight","acm","item","_getDate","push","toLocaleDateString","setState","Math","min","stop","_this3","_this$state","lib_Header","lib_Graph","lib_FocusPosts","Component","Boolean","window","location","hostname","match","ReactDOM","render","PostsGraph_PostsGraph","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d203a723.chunk.js","sourcesContent":["import React from 'react'\n\ninterface HeaderProps {\n  year: number\n  minYear: number\n  maxYear: number\n  prevClick?: () => void\n  nextClick?: () => void\n}\n\nconst Header = ({year, minYear, maxYear, prevClick, nextClick}: HeaderProps) => (\n  <div className=\"header\">\n    <button className={`header__button ${minYear < year ? '' : 'header__button--disabled'}`} onClick={prevClick}>prev</button>\n    <h3 className=\"header__title\">{year}</h3>\n    <button className={`header__button ${year < maxYear ? '' : 'header__button--disabled'}`} onClick={nextClick}>next</button>\n  </div>\n)\n\nexport default Header","import React from 'react'\n\ninterface NotExistGraphBlockProps {\n  onFocus: () => void\n}\n\nconst NotExistGraphBlock: React.SFC<NotExistGraphBlockProps> = ({\n  onFocus\n}) => (\n  <div\n    className=\"graph-block graph-block--none\"\n    onClick={onFocus}\n  ></div>\n)\n\ninterface GraphBlockProps {\n  year: number\n  month: number\n  week: number\n  count: number | false\n  onFocus: () => void\n}\n\nconst GraphBlock: React.SFC<GraphBlockProps> = ({year, month, week, count, onFocus}) => {\n  if (count === false) {\n    return <NotExistGraphBlock onFocus={onFocus} />\n  }\n\n  return (\n    <div\n      className={`graph-block graph-block--${count >= 4 ? 4 : count}`}\n      title={`${year}年${month + 1}月${week + 1}週目${count}記事`}\n      tabIndex={count > 0 ? 0 : -1}\n      onFocus={onFocus}\n    >\n      <span className=\"graph-block__label\">{`${year}年${month + 1}月${week + 1}週目${count}記事`}</span>\n    </div>\n  )\n}\n\nexport default GraphBlock","import moment from 'moment'\nmoment.updateLocale('ja', {\n  week : {\n    dow : 1,\n    doy : 7,\n  },\n})\n\nexport default function getWeeksInMonth(year: number, month: number): number {\n  const targetMonth = moment([year, month, 1])\n  const nextMonth = targetMonth.clone().add(1, 'month')\n  let weeks = nextMonth.month() === 0 ? targetMonth.weeksInYear() + 1 : nextMonth.weeks()\n  return weeks - targetMonth.weeks()\n}","import React from 'react'\nimport { Posts } from './PostsGraph'\nimport GraphBlock from './GraphBlock'\nimport getWeeksInMonth from './utils/getWeeksInMonth'\n\nconst months = [\n  'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n]\n\nconst weeks = [1, 2, 3, 4, 5]\n\nconst createKeys = (year: number, month: number) => {\n  return [\n    `${year}-${month}-0`,\n    `${year}-${month}-1`,\n    `${year}-${month}-2`,\n    `${year}-${month}-3`,\n    `${year}-${month}-4`,\n  ]\n}\n\nconst getCount = (post: any, key: string) => {\n  return post[key] ? post[key].length : 0\n}\n\ninterface GraphProps {\n  vertical: boolean,\n  year: number,\n  posts: Posts | null,\n  onFocus: (key: string) => void\n}\n\nconst Graph: React.SFC<GraphProps> = (props) => {\n  const { vertical, posts, year, onFocus } = props\n  if (!posts) return null\n\n  return (\n    <div className={`graph ${vertical ? 'graph--vertical' : ''}`}>\n      <div className=\"graph__months\">\n        {months.map(m => (\n          <div key={m} className=\"graph__month\">{m}</div>\n        ))}\n      </div>\n      <div className=\"graph__weeks\">\n        {weeks.map(w => (\n          <div key={w} className=\"graph__week\">{w}</div>\n        ))}\n      </div>\n      <div className=\"graph__posts\">\n        {months.map((_, m) => (\n          <React.Fragment key={m}>\n            {(() => {\n              const props = {\n                year,\n                month: m,\n              }\n              const keys = createKeys(year, m)\n              return [\n                <GraphBlock key={keys[0]} {...props} week={0} count={getCount(posts, keys[0])} onFocus={() => {onFocus(keys[0])}} />,\n                <GraphBlock key={keys[1]} {...props} week={1} count={getCount(posts, keys[1])} onFocus={() => {onFocus(keys[1])}} />,\n                <GraphBlock key={keys[2]} {...props} week={2} count={getCount(posts, keys[2])} onFocus={() => {onFocus(keys[2])}} />,\n                <GraphBlock key={keys[3]} {...props} week={3} count={getCount(posts, keys[3])} onFocus={() => {onFocus(keys[3])}} />,\n                <GraphBlock key={keys[4]} {...props} week={4}\n                  count={getWeeksInMonth(year, m) === 5 ? getCount(posts, keys[4]) : false}\n                  onFocus={() => {onFocus(keys[4])}}\n                />\n              ]\n            })()}\n          </React.Fragment>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Graph","import React from 'react'\nimport { Items } from 'rss-parser'\n\ninterface FocusPostsProps {\n  posts: Items[],\n}\n\nconst FocusPosts: React.SFC<FocusPostsProps> = ({posts = []}) => {\n  if (posts.length === 0) return null\n\n  return (\n    <ul className=\"focus-posts\">\n      <li className=\"focus-posts__label\">{`${posts[0].year}年${posts[0].month + 1}月${posts[0].week + 1}週 ${posts.length}記事`}</li>\n      {posts.map((post: Items) => (\n        <li\n          key={post.guid}\n          className=\"focus-posts__item\"\n        >\n          <h4 className=\"focus-posts__title\">\n            <a href={post.link} target=\"__blank\">{post.title}</a>\n          </h4>\n          <p className=\"focus-posts__date\"><small>{post.pubDate}</small></p>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default FocusPosts","import moment from 'moment'\nmoment.updateLocale('ja', {\n  week : {\n    dow : 1,\n    doy : 7,\n  },\n})\n\nexport default function getDate(dateValue: string | number | Date | moment.Moment) {\n  const date = moment(dateValue)\n  const lastDayOfWeek = date.endOf('week')\n  const firstDayOfMonth = lastDayOfWeek.clone().startOf('month')\n\n  return {\n    year: lastDayOfWeek.year(),\n    month: lastDayOfWeek.month(),\n    week: lastDayOfWeek.diff(firstDayOfMonth, 'weeks')\n  }\n}","import React, { Component } from 'react';\nimport Parser, { Items } from 'rss-parser'\nimport Header from './Header'\nimport Graph from './Graph'\nimport FocusPosts from './FocusPosts'\nimport getDate from './utils/getDate'\n\nexport interface Posts {\n  [key: string]: Items[]\n}\n\nconst today = new Date()\nconst locale = 'ja-JP'\nconst dateStringOptions = {\n  weekday: 'long',\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric'\n}\n\ninterface PostsGraphProps {\n  rss: string\n}\n\ninterface PostsGraphState {\n  vertical: boolean,\n  year: number,\n  minYear: number,\n  maxYear: number,\n  posts: Posts | null,\n  focus: string\n}\n\nexport default class PostsGraph extends Component<PostsGraphProps, PostsGraphState> {\n  state = {\n    vertical: false,\n    year: today.getFullYear(),\n    minYear: today.getFullYear(),\n    maxYear: today.getFullYear(),\n    posts: null,\n    focus: '',\n  }\n\n  componentDidMount() {\n    (async () => {\n      const parser = new Parser()\n      const feed = await parser.parseURL(this.props.rss)\n      if (feed.items) {\n        const years: number[] = []\n        const posts = feed.items.reduceRight((acm, item) => {\n          const { year, month, week } = getDate(item.pubDate as string)\n          years.push(year)\n\n          item.year = year\n          item.month = month\n          item.week = week\n          item.pubDate = new Date(item.pubDate as string).toLocaleDateString(locale, dateStringOptions)\n          \n          const key = `${year}-${month}-${week}`\n          if (!acm[key]) {\n            acm[key] = []\n          }\n          acm[key].push(item)\n\n          return acm\n        }, {})\n\n        this.setState({\n          minYear: Math.min(...years),\n          posts,\n        })\n      }\n    })()\n  }\n\n  render() {\n    const { vertical, year, minYear, maxYear, posts, focus } = this.state\n\n    return (\n      <div className=\"app\">\n        <button onClick={() => this.setState({vertical: !vertical})}>change view</button>\n        <Header\n          year={year}\n          maxYear={maxYear}\n          minYear={minYear}\n          prevClick={() => this.setState({year: year - 1, focus: ''})}\n          nextClick={() => this.setState({year: year + 1, focus: ''})}\n        />\n        <Graph\n          vertical={vertical}\n          year={year}\n          posts={posts}\n          onFocus={(key) => this.setState({focus: key})}\n        />\n        <FocusPosts\n          posts={focus && posts ? posts[focus] : []}\n        />\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PostsGraph from './lib/PostsGraph';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\n\nReactDOM.render(<PostsGraph rss=\"./rss.xml\" />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}