{"version":3,"sources":["lib/Header.tsx","lib/GraphBlock.tsx","lib/utils/getWeeksInMonth.ts","lib/Graph.tsx","lib/utils/getDate.ts","lib/PostsGraph.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","_ref","year","minYear","maxYear","prevClick","nextClick","react_default","a","createElement","className","concat","onClick","NotExistGraphBlock","onFocus","GraphBlock","_ref2","month","week","count","GraphBlock_NotExistGraphBlock","title","tabIndex","getWeeksInMonth","targetMonth","moment","nextMonth","clone","add","weeksInYear","weeks","updateLocale","dow","doy","months","getCount","post","key","length","Graph","props","vertical","posts","Object","keys","map","m","w","_","Fragment","createKeys","lib_GraphBlock","assign","_onFocus","apply","this","arguments","toString","_onFocus2","_onFocus3","_onFocus4","_onFocus5","getDate","dateValue","lastDayOfWeek","endOf","firstDayOfMonth","startOf","diff","today","Date","dateStringOptions","weekday","day","PostsGraph","state","getFullYear","focusKey","_this2","asyncToGenerator","regenerator_default","mark","_callee","parser","feed","years","_posts","wrap","_context","prev","next","Parser","parseURL","rss","sent","items","reduceRight","acm","item","_getDate","pubDate","push","toLocaleDateString","setState","Math","min","stop","prevProps","prevState","changeFocus","_this$state","focusPosts","_this3","_this$props","header","_this$state2","lib_Header","lib_Graph","Component","App","PostsGraph_PostsGraph","guid","href","link","target","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cea1efb.chunk.js","sourcesContent":["import React from 'react'\n\ninterface HeaderProps {\n  year: number\n  minYear: number\n  maxYear: number\n  prevClick?: () => void\n  nextClick?: () => void\n}\n\nconst Header = ({year, minYear, maxYear, prevClick, nextClick}: HeaderProps) => (\n  <div className=\"header\">\n    <button className={`header__button ${minYear < year ? '' : 'header__button--disabled'}`} onClick={prevClick}>prev</button>\n    <h3 className=\"header__title\">{year}</h3>\n    <button className={`header__button ${year < maxYear ? '' : 'header__button--disabled'}`} onClick={nextClick}>next</button>\n  </div>\n)\n\nexport default Header","import React from 'react'\n\ninterface NotExistGraphBlockProps {\n  onFocus: () => void\n}\n\nconst NotExistGraphBlock: React.SFC<NotExistGraphBlockProps> = ({\n  onFocus\n}) => (\n  <div\n    className=\"graph-block graph-block--none\"\n    onClick={onFocus}\n  ></div>\n)\n\ninterface GraphBlockProps {\n  year: number\n  month: number\n  week: number\n  count: number | false\n  onFocus: () => void\n}\n\nconst GraphBlock: React.SFC<GraphBlockProps> = ({year, month, week, count, onFocus}) => {\n  if (count === false) {\n    return <NotExistGraphBlock onFocus={onFocus} />\n  }\n\n  return (\n    <div\n      className={`graph-block graph-block--${count >= 4 ? 4 : count}`}\n      title={`${year}年${month + 1}月${week + 1}週目${count}記事`}\n      tabIndex={count > 0 ? 0 : -1}\n      onFocus={onFocus}\n    >\n      <span className=\"graph-block__label\">{`${year}年${month + 1}月${week + 1}週目${count}記事`}</span>\n    </div>\n  )\n}\n\nexport default GraphBlock","import moment from 'moment'\nmoment.updateLocale('ja', {\n  week : {\n    dow : 1,\n    doy : 7,\n  },\n})\n\nexport default function getWeeksInMonth(year: number, month: number): number {\n  const targetMonth = moment([year, month, 1])\n  const nextMonth = targetMonth.clone().add(1, 'month')\n  let weeks = nextMonth.month() === 0 ? targetMonth.weeksInYear() + 1 : nextMonth.weeks()\n  return weeks - targetMonth.weeks()\n}","import React from 'react'\nimport { Posts, PostsObject } from './PostsGraph'\nimport GraphBlock from './GraphBlock'\nimport getWeeksInMonth from './utils/getWeeksInMonth'\n\nconst months = [\n  'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n]\n\nconst weeks = [1, 2, 3, 4, 5]\n\nconst createKeys = (year: number, month: number) => {\n  return [\n    `${year}-${month}-0`,\n    `${year}-${month}-1`,\n    `${year}-${month}-2`,\n    `${year}-${month}-3`,\n    `${year}-${month}-4`,\n  ]\n}\n\nconst getCount = (post: any, key: string) => {\n  return post[key] ? post[key].length : 0\n}\n\ninterface GraphProps {\n  vertical?: boolean,\n  year: number,\n  posts: PostsObject,\n  onFocus: (key: string) => void\n}\n\nconst Graph: React.SFC<GraphProps> = (props) => {\n  const { vertical, posts, year, onFocus } = props\n  if (Object.keys(posts).length === 0) return null\n\n  return (\n    <div className={`graph ${vertical ? 'graph--vertical' : ''}`}>\n      <div className=\"graph__months\">\n        {months.map(m => (\n          <div key={m} className=\"graph__month\">{m}</div>\n        ))}\n      </div>\n      <div className=\"graph__weeks\">\n        {weeks.map(w => (\n          <div key={w} className=\"graph__week\">{w}</div>\n        ))}\n      </div>\n      <div className=\"graph__posts\">\n        {months.map((_, m) => (\n          <React.Fragment key={m}>\n            {(() => {\n              const props = {\n                year,\n                month: m,\n              }\n              const keys = createKeys(year, m)\n              return [\n                <GraphBlock key={keys[0]} {...props} week={0} count={getCount(posts, keys[0])} onFocus={() => {onFocus(keys[0])}} />,\n                <GraphBlock key={keys[1]} {...props} week={1} count={getCount(posts, keys[1])} onFocus={() => {onFocus(keys[1])}} />,\n                <GraphBlock key={keys[2]} {...props} week={2} count={getCount(posts, keys[2])} onFocus={() => {onFocus(keys[2])}} />,\n                <GraphBlock key={keys[3]} {...props} week={3} count={getCount(posts, keys[3])} onFocus={() => {onFocus(keys[3])}} />,\n                <GraphBlock key={keys[4]} {...props} week={4}\n                  count={getWeeksInMonth(year, m) === 5 ? getCount(posts, keys[4]) : false}\n                  onFocus={() => {onFocus(keys[4])}}\n                />\n              ]\n            })()}\n          </React.Fragment>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Graph","import moment from 'moment'\nmoment.updateLocale('ja', {\n  week : {\n    dow : 1,\n    doy : 7,\n  },\n})\n\nexport default function getDate(dateValue: string | number | Date | moment.Moment) {\n  const date = moment(dateValue)\n  const lastDayOfWeek = date.endOf('week')\n  const firstDayOfMonth = lastDayOfWeek.clone().startOf('month')\n\n  return {\n    year: lastDayOfWeek.year(),\n    month: lastDayOfWeek.month(),\n    week: lastDayOfWeek.diff(firstDayOfMonth, 'weeks')\n  }\n}","import React, { Component } from 'react';\nimport Parser, { Items } from 'rss-parser'\nimport Header from './Header'\nimport Graph from './Graph'\nimport getDate from './utils/getDate'\n\nexport type Posts = Items[]\n\nexport interface PostsObject {\n  [key: string]: Posts\n}\n\nconst today = new Date()\nconst locale = 'ja-JP'\nconst dateStringOptions = {\n  weekday: 'long',\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric'\n}\n\ninterface PostsGraphProps {\n  rss: string\n  header?: boolean\n  vertical?: boolean\n  changeFocus?: (focusPosts: Posts) => void\n}\n\ninterface PostsGraphState {\n  year: number,\n  minYear: number,\n  maxYear: number,\n  posts: PostsObject,\n  focusKey: string\n}\n\nexport default class PostsGraph extends Component<PostsGraphProps, PostsGraphState> {\n  state = {\n    year: today.getFullYear(),\n    minYear: today.getFullYear(),\n    maxYear: today.getFullYear(),\n    posts: {},\n    focusKey: '',\n  }\n\n  componentDidMount() {\n    (async () => {\n      const parser = new Parser()\n      const feed = await parser.parseURL(this.props.rss)\n      if (feed.items) {\n        const years: number[] = []\n        const posts = feed.items.reduceRight((acm, item) => {\n          const { year, month, week } = getDate(item.pubDate as string)\n          years.push(year)\n\n          item.year = year\n          item.month = month\n          item.week = week\n          item.pubDate = new Date(item.pubDate as string).toLocaleDateString(locale, dateStringOptions)\n          \n          const key = `${year}-${month}-${week}`\n          if (!acm[key]) {\n            acm[key] = []\n          }\n          acm[key].push(item)\n\n          return acm\n        }, {})\n\n        this.setState({\n          minYear: Math.min(...years),\n          posts,\n        })\n      }\n    })()\n  }\n\n  componentDidUpdate(prevProps: PostsGraphProps, prevState: PostsGraphState) {\n    const { changeFocus } = this.props\n    const { focusKey, posts } = this.state\n    if (focusKey === prevState.focusKey) return\n\n    const focusPosts: Items[] = (posts as PostsObject)[focusKey] ?\n      (posts as PostsObject)[focusKey] : []\n    if (typeof changeFocus === 'function') {\n      changeFocus(focusPosts)\n    }\n  }\n\n  render() {\n    const { header, vertical } = this.props\n    const { year, minYear, maxYear, posts } = this.state\n\n    return (\n      <div className=\"posts-graph\">\n        {header && (\n          <Header\n            year={year}\n            maxYear={maxYear}\n            minYear={minYear}\n            prevClick={() => this.setState({year: year - 1, focusKey: ''})}\n            nextClick={() => this.setState({year: year + 1, focusKey: ''})}\n          />\n        )}\n        <Graph\n          vertical={vertical}\n          year={year}\n          posts={posts}\n          onFocus={(key) => this.setState({focusKey: key})}\n        />\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\nimport PostsGraph, { Posts } from './lib/PostsGraph';\nimport { Items } from 'rss-parser';\nimport './App.scss'\n\ninterface AppState {\n  posts: Posts\n}\n\nexport default class App extends Component {\n  state: AppState = {\n    posts: [],\n  }\n\n  render() {\n    const { posts } = this.state\n\n    return (\n      <div className=\"app\">\n        <PostsGraph\n          rss=\"./rss.xml\"\n          vertical={false}\n          header={true}\n          changeFocus={(focusPosts: Posts) => this.setState({posts: focusPosts})}\n        />\n        {posts.length > 0 && (\n          <ul className=\"focus-posts\">\n            <li className=\"focus-posts__label\">{`${posts[0].year}年${posts[0].month + 1}月${posts[0].week + 1}週 ${posts.length}記事`}</li>\n            {posts.map((post: Items) => (\n              <li\n                key={post.guid}\n                className=\"focus-posts__item\"\n              >\n                <h4 className=\"focus-posts__title\">\n                  <a href={post.link} target=\"__blank\">{post.title}</a>\n                </h4>\n                <p className=\"focus-posts__date\"><small>{post.pubDate}</small></p>\n              </li>\n            ))}\n          </ul>\n        )}\n    </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}